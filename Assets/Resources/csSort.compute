#pragma kernel Sort
#pragma kernel CalculateOffsets

struct Entry
{
	uint originalIndex;
	uint hash;
	uint key;
};

RWStructuredBuffer<Entry> Entries;
const uint numEntries;
const uint groupWidth;
const uint groupHeight;
const uint stepIndex;

[numthreads(128, 1, 1)]
void Sort (uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;

	uint hIndex = i & (groupWidth - 1);
	uint indexLeft = hIndex + (groupHeight + 1) * (i / groupWidth);
	uint rightStepSize = stepIndex == 0 ? groupHeight - 2 * hIndex : (groupHeight + 1) / 2;
	uint indexRight = indexLeft + rightStepSize;

	if (indexRight >= numEntries) return;

	uint valueLeft = Entries[indexLeft].key;
	uint valueRight = Entries[indexRight].key;

	if (valueLeft > valueRight)
	{
		Entry temp = Entries[indexLeft];
		Entries[indexLeft] = Entries[indexRight];
		Entries[indexRight] = temp;
	}
}

RWStructuredBuffer<uint> Offsets;

[numthreads(128, 1, 1)]
void CalculateOffsets(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numEntries) { return; }

	uint i = id.x;
	uint null = numEntries;

	uint key = Entries[i].key;
	uint keyPrev = i == 0 ? null : Entries[i - 1].key;

	if (key != keyPrev)
	{
		Offsets[key] = i;
	}
}